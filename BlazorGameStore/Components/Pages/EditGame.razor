@page "/editgame"
@page "/editgame/{id:int}"
@inject NavigationManager NavigationManager
@inject GamesClient GamesClient
@inject GenreClient GenreClient
@rendermode InteractiveServer

<PageTitle>New Game</PageTitle>
<h3>@title</h3>

@if(genres is null || game is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="@game" FormName="editgame" OnValidSubmit="HandleSubmitAsync" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary></ValidationSummary>
                <div class="mb-3">
                    <label for="name" class="form-label">Name : </label>
                    <InputText id="name" class="form-control" @bind-Value="@game.Name" />
                    <ValidationMessage For="() => game.Name" />
                </div>
                <div class="mb-3">
                    <label for="genre" class="form-label">Genre : </label>
                    <InputSelect id="genre" class="form-control" @bind-Value="@game.GenreId">
                        <option value="">Select a Genre</option>
                        @foreach (var genre in genres)
                        {
                            <option value="@genre.GenreId">@genre.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => game.GenreId" />
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Price : </label>
                    <InputNumber id="price" class="form-control" @bind-Value="@game.Price" />
                    <ValidationMessage For="() => game.Price" />
                </div>
                <div class="mb-3">
                    <label for="releaseDate" class="form-label">Release Date : </label>
                    <InputDate id="releaseDate" class="form-control" @bind-Value="@game.ReleaseDate" />
                    <ValidationMessage For="() => game.ReleaseDate" />
                </div>
                <button class="btn btn-primary" type="submit">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="Clear">Clear</button>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public int? Id { get; set; }

    private string title { get; set; }

    private List<Genre>? genres;

    [SupplyParameterFromForm]
    private GameDetail? game { get; set; }

    protected override async Task OnInitializedAsync()
    {
        genres = await GenreClient.GetDataAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        //OnParametersSet is called whenever form is loaded. This inlude initial load and submiting
        //therefore we check if user submit and if form params are populated continue with resetting game to initial state
        if(game is not null)
        {
            return;
        }

        if(Id is not null)
        {
            game = await GamesClient.GetGameAsync(Id.Value);
            title = $"Edit {game.Name}";
        }
        else
        {
            game = new()
            {
                Name = string.Empty,
                ReleaseDate = DateOnly.FromDateTime(DateTime.UtcNow)
            };
            title = "New Game";
        }
    }

    private async Task HandleSubmitAsync()
    {
        ArgumentNullException.ThrowIfNull(game);
        ArgumentException.ThrowIfNullOrEmpty(game.Name);
        if(Id is null)
        {
            await GamesClient.AddAsync(game);
        }
        else
        {
            game.Id = Id.Value;
            await GamesClient.UpdateGameAsync(game);
        }

        NavigationManager.NavigateTo("/");
    }

    private void Clear()
    {
        game = new()
        {
            Name = string.Empty,
            ReleaseDate = DateOnly.FromDateTime(DateTime.UtcNow)
        };
        StateHasChanged(); // Notify the UI to refresh
    }
}
